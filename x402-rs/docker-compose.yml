# =============================================================================
# Docker Compose Configuration for x402 Facilitator
# Karmacadabra - Ultravioleta DAO
# =============================================================================
#
# Purpose: Easy deployment of x402 facilitator with all dependencies
# Services: facilitator, caddy (reverse proxy), prometheus, grafana
#
# Usage:
#   Development:  docker-compose up -d
#   Production:   docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
#   Logs:         docker-compose logs -f facilitator
#   Stop:         docker-compose down
#
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # x402-rs Facilitator (Payment Settlement Service)
  # =============================================================================
  facilitator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: x402-facilitator-karmacadabra
    image: ultravioletadao/x402-facilitator:latest

    # Environment variables from .env file
    env_file:
      - .env

    # Port mapping (internal:external)
    ports:
      - "8080:8080"  # HTTP API

    # Restart policy
    restart: unless-stopped

    # Resource limits (adjust based on Cherry Servers specs)
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Volumes for logs and persistent data
    volumes:
      - facilitator-logs:/var/log/facilitator
      - facilitator-data:/app/data

    # Network
    networks:
      - karmacadabra-network

    # Labels for monitoring
    labels:
      - "com.ultravioletadao.service=x402-facilitator"
      - "com.ultravioletadao.project=karmacadabra"
      - "com.ultravioletadao.network=avalanche-fuji"

  # =============================================================================
  # Caddy Reverse Proxy (HTTPS + Rate Limiting)
  # =============================================================================
  caddy:
    image: caddy:2-alpine
    container_name: caddy-facilitator

    # Port mapping
    ports:
      - "80:80"      # HTTP (redirects to HTTPS)
      - "443:443"    # HTTPS
      - "443:443/udp" # HTTP/3

    # Restart policy
    restart: unless-stopped

    # Volumes
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy-data:/data
      - caddy-config:/config
      - caddy-logs:/var/log/caddy

    # Network
    networks:
      - karmacadabra-network

    # Depends on facilitator being healthy
    depends_on:
      facilitator:
        condition: service_healthy

    # Labels
    labels:
      - "com.ultravioletadao.service=caddy-proxy"
      - "com.ultravioletadao.project=karmacadabra"

  # =============================================================================
  # Prometheus (Metrics Collection)
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-facilitator

    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

    # Port mapping
    ports:
      - "9090:9090"

    # Restart policy
    restart: unless-stopped

    # Volumes
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus

    # Network
    networks:
      - karmacadabra-network

    # Labels
    labels:
      - "com.ultravioletadao.service=prometheus"
      - "com.ultravioletadao.project=karmacadabra"

  # =============================================================================
  # Grafana (Visualization & Dashboards)
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-facilitator

    # Port mapping
    ports:
      - "3000:3000"

    # Restart policy
    restart: unless-stopped

    # Environment variables
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=changeme  # Change in production!
      - GF_INSTALL_PLUGINS=grafana-piechart-panel

    # Volumes
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro

    # Network
    networks:
      - karmacadabra-network

    # Depends on Prometheus
    depends_on:
      - prometheus

    # Labels
    labels:
      - "com.ultravioletadao.service=grafana"
      - "com.ultravioletadao.project=karmacadabra"

# =============================================================================
# Networks
# =============================================================================
networks:
  karmacadabra-network:
    driver: bridge
    name: karmacadabra-network

# =============================================================================
# Volumes (Persistent Data)
# =============================================================================
volumes:
  # Facilitator volumes
  facilitator-logs:
    driver: local
    name: x402-facilitator-logs

  facilitator-data:
    driver: local
    name: x402-facilitator-data

  # Caddy volumes
  caddy-data:
    driver: local
    name: caddy-data

  caddy-config:
    driver: local
    name: caddy-config

  caddy-logs:
    driver: local
    name: caddy-logs

  # Prometheus volumes
  prometheus-data:
    driver: local
    name: prometheus-data

  # Grafana volumes
  grafana-data:
    driver: local
    name: grafana-data

# =============================================================================
# Quick Commands:
#
# Start all services:
#   docker-compose up -d
#
# View logs:
#   docker-compose logs -f facilitator
#   docker-compose logs -f caddy
#
# Restart facilitator:
#   docker-compose restart facilitator
#
# Check service health:
#   docker-compose ps
#   curl http://localhost:8080/health
#   curl https://facilitator.ultravioletadao.xyz/health
#
# Stop all services:
#   docker-compose down
#
# Clean up (DANGER: deletes data):
#   docker-compose down -v
#
# Update facilitator:
#   docker-compose pull facilitator
#   docker-compose up -d facilitator
#
# View metrics:
#   http://localhost:9090 (Prometheus)
#   http://localhost:3000 (Grafana)
#
# =============================================================================
