# =============================================================================
# Prometheus Configuration for x402 Facilitator
# Karmacadabra - Ultravioleta DAO
# =============================================================================
#
# Purpose: Scrape metrics from x402 facilitator and monitor system health
# Metrics exposed at: http://facilitator:8080/metrics
#
# =============================================================================

# Global configuration
global:
  # How frequently to scrape targets
  scrape_interval: 15s

  # How long until a scrape request times out
  scrape_timeout: 10s

  # How frequently to evaluate rules
  evaluation_interval: 15s

  # External labels attached to all metrics
  external_labels:
    cluster: 'karmacadabra-fuji'
    environment: 'testnet'
    project: 'ultravioleta-dao'

# Alertmanager configuration (future)
# alerting:
#   alertmanagers:
#     - static_configs:
#         - targets:
#           - alertmanager:9093

# Rule files (for alerting)
# rule_files:
#   - "alerts/*.yml"

# Scrape configurations
scrape_configs:
  # =============================================================================
  # x402 Facilitator Metrics
  # =============================================================================
  - job_name: 'x402-facilitator'

    # Scrape interval (override global)
    scrape_interval: 10s
    scrape_timeout: 5s

    # Metrics path
    metrics_path: '/metrics'

    # Scheme (http or https)
    scheme: http

    # Static targets
    static_configs:
      - targets: ['facilitator:8080']
        labels:
          service: 'x402-facilitator'
          network: 'avalanche-fuji'
          chain_id: '43113'

    # Metric relabeling (filter/modify metrics)
    metric_relabel_configs:
      # Add custom label to all x402 metrics
      - source_labels: [__name__]
        regex: 'x402_.*'
        target_label: 'component'
        replacement: 'payment-facilitator'

  # =============================================================================
  # Prometheus Self-Monitoring
  # =============================================================================
  - job_name: 'prometheus'

    scrape_interval: 30s
    static_configs:
      - targets: ['localhost:9090']
        labels:
          service: 'prometheus'

  # =============================================================================
  # Caddy Reverse Proxy Metrics (if enabled)
  # =============================================================================
  # - job_name: 'caddy'
  #
  #   scrape_interval: 15s
  #   static_configs:
  #     - targets: ['caddy:2019/metrics']
  #       labels:
  #         service: 'caddy-proxy'

  # =============================================================================
  # Node Exporter (System Metrics - if deployed)
  # =============================================================================
  # - job_name: 'node-exporter'
  #
  #   scrape_interval: 30s
  #   static_configs:
  #     - targets: ['node-exporter:9100']
  #       labels:
  #         service: 'system-metrics'

# =============================================================================
# Expected x402 Facilitator Metrics:
#
# Payment Metrics:
#   - x402_payments_total{status="success|failed"}
#   - x402_payments_amount_total{token="UVD|USDC|WAVAX"}
#   - x402_verify_duration_seconds
#   - x402_settle_duration_seconds
#
# Blockchain Metrics:
#   - x402_gas_used_total
#   - x402_gas_price_gwei
#   - x402_balance_avax
#   - x402_nonce_errors_total
#
# HTTP Metrics:
#   - x402_http_requests_total{method,path,status}
#   - x402_http_request_duration_seconds
#   - x402_http_errors_total{error_type}
#
# Agent Metrics:
#   - x402_agent_transactions_total{agent_id}
#   - x402_agent_revenue_total{agent_id,token}
#
# =============================================================================
# Useful Prometheus Queries:
#
# Total payments per minute:
#   rate(x402_payments_total[1m])
#
# Success rate:
#   rate(x402_payments_total{status="success"}[5m]) /
#   rate(x402_payments_total[5m]) * 100
#
# Average verify latency:
#   rate(x402_verify_duration_seconds_sum[5m]) /
#   rate(x402_verify_duration_seconds_count[5m])
#
# Facilitator AVAX balance:
#   x402_balance_avax
#
# Gas spent (last hour):
#   increase(x402_gas_used_total[1h])
#
# HTTP error rate:
#   rate(x402_http_requests_total{status=~"5.."}[5m]) /
#   rate(x402_http_requests_total[5m]) * 100
#
# =============================================================================
