"""
User Agent Factory - Mass Deployment Script
Creates and configures 48 user agent instances

Sprint 3, Task 4: User agent factory for mass deployment
"""

import json
import os
import shutil
import sys
from pathlib import Path
from typing import List, Dict

# Fix Windows console encoding
if sys.platform == 'win32':
    try:
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
    except:
        pass


def create_agent_directory(username: str, base_dir: Path, template_dir: Path) -> Path:
    """Create directory for user agent"""
    agent_dir = base_dir / "user-agents" / username
    agent_dir.mkdir(parents=True, exist_ok=True)

    # Copy template files
    template_main = template_dir / "main.py"
    template_env = template_dir / ".env.example"

    if template_main.exists():
        shutil.copy(template_main, agent_dir / "main.py")

    if template_env.exists():
        shutil.copy(template_env, agent_dir / ".env.example")

    return agent_dir


def generate_env_file(
    username: str,
    agent_dir: Path,
    port: int,
    base_config: Dict[str, str]
) -> None:
    """Generate .env file for user agent"""

    agent_card_path = f"../../agent-cards/{username}.json"
    profile_path = f"../../user-profiles/{username}.json"

    env_content = f"""# User Agent Configuration - {username}
# Generated by deploy_user_agents.py

# Agent Identity
AGENT_NAME={username}-agent
USERNAME={username}
AGENT_DOMAIN={username}.karmacadabra.ultravioletadao.xyz
PORT={port}

# Blockchain Configuration
RPC_URL_FUJI={base_config['RPC_URL_FUJI']}
CHAIN_ID=43113

# Contract Addresses
IDENTITY_REGISTRY={base_config['IDENTITY_REGISTRY']}
REPUTATION_REGISTRY={base_config['REPUTATION_REGISTRY']}
VALIDATION_REGISTRY={base_config['VALIDATION_REGISTRY']}
GLUE_TOKEN_ADDRESS={base_config['GLUE_TOKEN_ADDRESS']}

# Facilitator
FACILITATOR_URL={base_config['FACILITATOR_URL']}

# Agent Wallet (unique per user)
# TODO: Generate or import wallet for {username}
PRIVATE_KEY=

# Agent Data Paths
AGENT_CARD_PATH={agent_card_path}
PROFILE_PATH={profile_path}
"""

    env_file = agent_dir / ".env"
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(env_content)


def create_run_script(username: str, agent_dir: Path) -> None:
    """Create run.sh script for the agent"""

    run_script = f"""#!/bin/bash
# Run script for {username} agent

cd "$(dirname "$0")"

# Activate virtual environment if exists
if [ -d "venv" ]; then
    source venv/bin/activate
fi

# Run agent
python main.py
"""

    run_file = agent_dir / "run.sh"
    with open(run_file, 'w', encoding='utf-8') as f:
        f.write(run_script)

    # Make executable
    run_file.chmod(0o755)

    # Create Windows batch file
    bat_script = f"""@echo off
REM Run script for {username} agent

cd /d "%~dp0"

REM Activate virtual environment if exists
if exist venv\\Scripts\\activate.bat (
    call venv\\Scripts\\activate.bat
)

REM Run agent
python main.py
"""

    bat_file = agent_dir / "run.bat"
    with open(bat_file, 'w', encoding='utf-8') as f:
        f.write(bat_script)


def create_docker_compose(usernames: List[str], base_dir: Path) -> None:
    """Create docker-compose.yml for all agents"""

    services = {}

    for i, username in enumerate(usernames):
        port = 9000 + i
        services[f"{username}-agent"] = {
            "build": {
                "context": ".",
                "dockerfile": "Dockerfile"
            },
            "container_name": f"{username}-agent",
            "environment": [
                f"AGENT_NAME={username}-agent",
                f"USERNAME={username}",
                f"AGENT_DOMAIN={username}.karmacadabra.ultravioletadao.xyz",
                f"PORT={port}",
                "RPC_URL_FUJI=https://avalanche-fuji-c-chain-rpc.publicnode.com"
            ],
            "ports": [f"{port}:{port}"],
            "volumes": [
                f"./user-agents/{username}:/app",
                f"./agent-cards/{username}.json:/app/agent-card.json:ro",
                f"./user-profiles/{username}.json:/app/profile.json:ro"
            ],
            "restart": "unless-stopped"
        }

    docker_compose = {
        "version": "3.8",
        "services": services
    }

    compose_file = base_dir / "docker-compose.user-agents.yml"
    with open(compose_file, 'w', encoding='utf-8') as f:
        import yaml
        yaml.dump(docker_compose, f, default_flow_style=False)

    print(f"‚úÖ Created docker-compose.user-agents.yml")


def create_deployment_summary(
    usernames: List[str],
    base_dir: Path,
    start_port: int
) -> None:
    """Create deployment summary document"""

    summary = f"""# User Agents Deployment Summary

**Generated:** {os.popen('date').read().strip()}
**Total Agents:** {len(usernames)}
**Port Range:** {start_port}-{start_port + len(usernames) - 1}

## Agent Directory Structure

```
user-agents/
"""

    for i, username in enumerate(usernames):
        port = start_port + i
        summary += f"""‚îú‚îÄ‚îÄ {username}/
‚îÇ   ‚îú‚îÄ‚îÄ main.py           # Agent implementation
‚îÇ   ‚îú‚îÄ‚îÄ .env              # Configuration (PORT={port})
‚îÇ   ‚îú‚îÄ‚îÄ .env.example      # Template
‚îÇ   ‚îú‚îÄ‚îÄ run.sh            # Linux run script
‚îÇ   ‚îî‚îÄ‚îÄ run.bat           # Windows run script
"""

    summary += """```

## Starting Agents

### Individual Agent

```bash
cd user-agents/{username}
python main.py
```

### All Agents (Linux/Mac)

```bash
for dir in user-agents/*/; do
    (cd "$dir" && ./run.sh &)
done
```

### All Agents (Docker Compose)

```bash
docker-compose -f docker-compose.user-agents.yml up -d
```

## Port Mapping

| Username | Port | Health Check |
|----------|------|--------------|
"""

    for i, username in enumerate(usernames):
        port = start_port + i
        summary += f"| {username} | {port} | http://localhost:{port}/health |\n"

    summary += """
## Agent Endpoints

Each agent exposes:
- `GET /.well-known/agent-card` - A2A protocol agent card
- `GET /health` - Health check
- `GET /services` - List services
- `POST /services/{id}` - Execute service
- `GET /profile` - User profile

## Next Steps

1. **Configure Wallets**
   - Generate/import private keys for each agent
   - Add to `.env` files (PRIVATE_KEY=)

2. **Fund Wallets**
   - Each agent needs ~0.01 AVAX for gas (registration)
   - Get from faucet: https://faucet.avax.network/

3. **Test Individual Agent**
   ```bash
   cd user-agents/elboorja
   python main.py
   curl http://localhost:9044/health
   ```

4. **Deploy All**
   ```bash
   docker-compose -f docker-compose.user-agents.yml up -d
   ```

5. **Monitor**
   ```bash
   # Check all agents
   for port in {9000..9047}; do
       curl -s http://localhost:$port/health | jq -r '.agent' 2>/dev/null
   done
   ```

## Troubleshooting

- **Port conflicts**: Each agent has unique port
- **Missing agent card**: Run `python scripts/generate_agent_cards.py`
- **Missing profile**: Run `python scripts/extract_48_profiles_simple.py`
- **Private key error**: Configure PRIVATE_KEY in `.env`

---

**Sprint 3, Task 4**
User agent factory deployment complete.
"""

    summary_file = base_dir / "DEPLOYMENT_SUMMARY.md"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(summary)

    print(f"‚úÖ Created DEPLOYMENT_SUMMARY.md")


def main():
    """Main deployment function"""

    print("=" * 80)
    print("Karmacadabra - Sprint 3: User Agent Factory")
    print("Mass Deployment System")
    print("=" * 80)
    print()

    # Setup paths
    base_dir = Path(__file__).parent.parent
    template_dir = base_dir / "user-agent-template"
    profiles_dir = base_dir / "user-profiles"
    agent_cards_dir = base_dir / "agent-cards"

    # Verify template exists
    if not template_dir.exists():
        print(f"‚ùå Template directory not found: {template_dir}")
        return 1

    # Get list of users from profiles
    profile_files = list(profiles_dir.glob("*.json"))
    usernames = [p.stem for p in profile_files]
    usernames.sort()  # Alphabetical order

    print(f"üìã Found {len(usernames)} users to deploy")
    print()

    # Load base configuration from main .env
    from dotenv import load_dotenv
    load_dotenv(base_dir / ".env")

    base_config = {
        "RPC_URL_FUJI": os.getenv("RPC_URL_FUJI", "https://avalanche-fuji-c-chain-rpc.publicnode.com"),
        "IDENTITY_REGISTRY": os.getenv("IDENTITY_REGISTRY", ""),
        "REPUTATION_REGISTRY": os.getenv("REPUTATION_REGISTRY", ""),
        "VALIDATION_REGISTRY": os.getenv("VALIDATION_REGISTRY", ""),
        "GLUE_TOKEN_ADDRESS": os.getenv("GLUE_TOKEN_ADDRESS", ""),
        "FACILITATOR_URL": os.getenv("FACILITATOR_URL", "http://localhost:8080")
    }

    # Validate base config
    missing = [k for k, v in base_config.items() if not v and k != "FACILITATOR_URL"]
    if missing:
        print(f"‚ö†Ô∏è  Warning: Missing configuration: {', '.join(missing)}")
        print("   Agents will be created but won't register on-chain until configured")
        print()

    # Deploy each agent
    start_port = 9000
    successful = 0
    failed = 0

    for i, username in enumerate(usernames):
        port = start_port + i
        print(f"[{i+1}/{len(usernames)}] Deploying {username} (port {port})...", end=" ")

        try:
            # Create directory and copy files
            agent_dir = create_agent_directory(username, base_dir, template_dir)

            # Generate .env
            generate_env_file(username, agent_dir, port, base_config)

            # Create run scripts
            create_run_script(username, agent_dir)

            # Verify agent card and profile exist
            agent_card = agent_cards_dir / f"{username}.json"
            profile = profiles_dir / f"{username}.json"

            if not agent_card.exists():
                print(f"‚ö†Ô∏è  Missing agent card")
            elif not profile.exists():
                print(f"‚ö†Ô∏è  Missing profile")
            else:
                print("‚úÖ")

            successful += 1

        except Exception as e:
            print(f"‚ùå {e}")
            failed += 1

    print()

    # Create deployment artifacts
    print("Creating deployment artifacts...")

    try:
        # Docker compose (optional, requires PyYAML)
        try:
            import yaml
            create_docker_compose(usernames, base_dir)
        except ImportError:
            print("‚ö†Ô∏è  PyYAML not installed, skipping docker-compose.yml")

        # Deployment summary
        create_deployment_summary(usernames, base_dir, start_port)

    except Exception as e:
        print(f"‚ö†Ô∏è  Error creating artifacts: {e}")

    print()
    print("=" * 80)
    print(f"üìä Deployment Summary")
    print("=" * 80)
    print(f"Total agents: {len(usernames)}")
    print(f"‚úÖ Successfully deployed: {successful}")
    print(f"‚ùå Failed: {failed}")
    print(f"üìÇ Output directory: {base_dir / 'user-agents'}")
    print(f"üîå Port range: {start_port}-{start_port + len(usernames) - 1}")
    print()

    if failed == 0:
        print("üéâ All user agents deployed successfully!")
        print()
        print("Next steps:")
        print("1. Configure private keys in each .env file")
        print("2. Fund wallets with AVAX (https://faucet.avax.network/)")
        print("3. Test an agent: cd user-agents/elboorja && python main.py")
        print("4. See DEPLOYMENT_SUMMARY.md for full instructions")
        return 0
    else:
        print(f"‚ö†Ô∏è  {failed} agents failed to deploy")
        return 1


if __name__ == "__main__":
    sys.exit(main())
